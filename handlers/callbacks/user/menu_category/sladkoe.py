from bot.bot import dp
from base.base import SessionLocal
from aiogram.types import InputFile
from aiogram.types import CallbackQuery
from base.models import Category, Product
from keyboard.user.inline.korzina import add_product_basket_generate
from keyboard.user.inline.home_navigate import home_navigate_user



@dp.callback_query_handler(text="sladkoe")
async def menu_category_flour(callback: CallbackQuery):

    session = SessionLocal()

    products_sweet = (
        session.query(
            Product.id,
            Product.name,
            Product.description,
            Product.price,
            Product.photo
        )
        .join(Category)
        .filter(Category.name == "–°–ª–∞–¥–∫–æ–µ")
        .all()
    )

    if not products_sweet:

        await callback.bot.delete_message(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id
        )

        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text="–°–ø–∏—Å–æ–∫ –¢–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç ‚ùå\n\n"
                 "ü§ñ –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ üö©",
            reply_markup=home_navigate_user
        )

        session.close()
    else:

        await callback.bot.delete_message(
            chat_id=callback.from_user.id,
            message_id=callback.message.message_id
        )

        await callback.bot.send_message(
            callback.from_user.id,
            text="‚ö° –°–õ–ê–î–ö–ò–ô –û–¢–î–ï–õ ‚ö°"
        )

        await callback.answer(text="‚ö° –°–õ–ê–î–ö–ò–ô –û–¢–î–ï–õ ‚ö°")

        for product in products_sweet:
            open_photo_product_flour = f"{product[4]}"

            try:
                photo_sweet_product = InputFile(open_photo_product_flour)
                await callback.bot.send_photo(
                    callback.from_user.id,
                    photo=photo_sweet_product,
                    caption=f"ü•ê –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product[1]}\n"
                            f"\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\n"
                            f" {product[2]}\n\n"
                            f" üí∞ –¶–µ–Ω–∞: {product[3]} ‚ÇΩ",
                    reply_markup=add_product_basket_generate(product[0])
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.bot.send_message(
                    callback.from_user.id,
                    text=f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product[0]}\n"
                         f"\n–û–ø–∏—Å–∞–Ω–∏–µ:\n"
                         f"{product[1]}\n\n"
                         f"–¶–µ–Ω–∞: {product[2]}\n\n"
                         f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                )

        await callback.message.answer(text="‚ö° –ù–∞–≤–∏–≥–∞—Ü–∏—è ‚ö°", reply_markup=home_navigate_user)