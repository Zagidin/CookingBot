from bot.bot import dp
from aiogram.types import (
    Message,
    ContentType,
    ReplyKeyboardRemove
)
from base.models import Admin
from base.base import SessionLocal
from aiogram.dispatcher import FSMContext
from keyboard.user.reply.phone import phone
from keyboard.admin.inline.log_in_passwd import passwd_start
from keyboard.admin.inline.navigate_admin_home import home_nav_admin
from status_machine.admin.registration_admin import RegistrationAdmin


@dp.message_handler(commands=["admin", "–∞–¥–º–∏–Ω"])
async def admin_start_registration(msg: Message):

    session = SessionLocal()

    admin = session.query(Admin).all()

    if not admin:
        await msg.answer(
            text=f"üëã @{msg.from_user.username}\n"
                 f"\n–î–ª—è –í—Ö–æ–¥–∞ –≤ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úç"
        )
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è üö©")

        await RegistrationAdmin.admin_name.set()
    else:
        admin = [admin_tg_id[0] for admin_tg_id in session.query(Admin.admin_tg_id).all()]
        if msg.from_user.id in admin:
            await msg.answer("üëã", reply_markup=ReplyKeyboardRemove())
            await msg.answer(
                text="–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ üß∞",
                reply_markup=home_nav_admin
            )
        else:
            await msg.answer("‚ùå")
            await msg.answer(
                text="–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∫ –î–æ—Å—Ç—É–ø—É –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏! ‚ùå\n\n"
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –í–æ–π—Ç–∏ –ü–ê–†–û–õ–ï–ú - <i>–í—ã–¥–∞—ë—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</i>",
                parse_mode='HTML',
                reply_markup=passwd_start
            )


@dp.message_handler(state=RegistrationAdmin.admin_name)
async def reg_admin_name(msg: Message, state: FSMContext):

    async with state.proxy() as data:
        data["admin_name"] = msg.text

    await msg.answer(
        text="–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –í–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±",
        reply_markup=phone
    )

    await RegistrationAdmin.admin_phone.set()


@dp.message_handler(state=RegistrationAdmin.admin_phone, content_types=ContentType.CONTACT)
async def reg_admin_phone_and_id(msg: Message, state: FSMContext):
    session = SessionLocal()

    async with state.proxy() as data:
        data["admin_phone"] = msg.contact.phone_number

    async with state.proxy() as data:
        data["admin_tg_id"] = msg.from_user.id

    await state.finish()

    admin = Admin(
        admin_name=data['admin_name'],
        admin_phone=str(data['admin_phone']),
        admin_tg_id=data['admin_tg_id'],
    )
    session.add(admin)
    session.commit()

    await msg.answer("‚úÖ")
    await msg.answer(
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ä–æ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
             "–î–æ—Å—Ç—É–ø–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ üß∞",
        reply_markup=home_nav_admin
    )

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        for i in range(msg.message_id, 0, -1):
            await dp.bot.delete_message(msg.from_user.id, i)
    except: ...
